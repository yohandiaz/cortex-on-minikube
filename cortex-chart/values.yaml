namespace: cortex

cortex:
  name: cortex
  matchLabels:
    app: cortex
  replicas:
    replicaCount: 1
  image: thehiveproject/cortex:3.1.8
  port: 9001
  nodePort: 30001
  resources:
    limits:
      cpu: "500m"
      memory: "1000Mi"
    requests:
      cpu: "500m"
      memory: "750Mi"
  env:
  - name: job_directory
    value: "/tmp/cortex-jobs"
  - name: es-hostname
    value: "elasticsearch"
  - name: es-uri
    value: "http://elasticsearch:9200"
  - name: docker-job-directory
    value: "/var/run/cortex/jobs"
  readinessProbe:
    httpGet:
      path: /api/status
      port: 9001
      scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  livenessProbe:
    httpGet:
      path: /api/status
      port: 9001
      scheme: HTTP
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  volumeMounts:
    - name: job-volume
      mountPath: "/tmp/cortex-jobs"
    - name: docker-sock
      mountPath: /var/run/docker.sock
  volumes:
    - name: job-volume
      hostPath:
        path: /var/run/cortex/jobs
        type: DirectoryOrCreate
    - name: docker-sock
      hostPath:
        # Binding the docker socket is a security risk but it's needed for cortex to run it's jobs
        # It could be achieved by allowing cortex to run kubernetes jobs, but Cortex doesn't seems to support that.
        # Needs to be reviewed!!
        path: /var/run/docker.sock
        type: Socket

elasticsearch:
  name: elasticsearch
  matchLabels:
    app: elasticsearch
  image: elasticsearch:7.17.20
  replicaCount: 1
  port: 9200
  resources:
    limits:
      cpu: "500m"
      memory: "2Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
  env:
    http_host: "0.0.0.0"
    discovery_type: "single-node"
    script_allowed_types: "inline"
    thread_pool_search_queue_size: "100000"
    thread_pool_write_queue_size: "10000"
  readinessProbe:
    httpGet:
      path: /_cluster/health
      port: 9200
      scheme: HTTP
    initialDelaySeconds: 60
    periodSeconds: 20
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 5
  livenessProbe:
    httpGet:
      path: /_cluster/health
      port: 9200
      scheme: HTTP
    initialDelaySeconds: 120
    periodSeconds: 30
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 10
  volumeMounts:
    - name: elasticsearch-data
      mountPath: /usr/share/elasticsearch/data
  volumeClaimTemplates:
    name: elasticsearch-data
    accessModes: ["ReadWriteOnce"]
    storage: "5Gi"


ingress:
  namespace: ingress-nginx